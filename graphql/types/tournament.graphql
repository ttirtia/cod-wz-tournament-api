type Tournament {
  id: ID!
  name: String!
  startDate: Date!
  endDate: Date!
  gameLimit: Int!
  isOpen: Boolean!
  roster: Roster
  teams: [Team]
  createdAt: Date!
  updatedAt: Date
}

enum TeamOrder {
  NAME_ASC
  NAME_DESC
  PLACEMENT_ASC
  PLACEMENT_DESC
}

input CreateTournamentInput {
  name: String!
  startDate: Date!
  endDate: Date!
  gameLimit: Int
  isOpen: Boolean
  roster: ID
}

input UpdateTournamentInput {
  name: String
  startDate: Date
  endDate: Date
  gameLimit: Int
  isOpen: Boolean
  roster: ID
}

input TournamentFilter {
  id: ID
  name: String
  startDate: Date
  endDate: Date
  isOpen: Boolean
}

type Mutation {
  createTournament(tournament: CreateTournamentInput!): Tournament!
  updateTournament(id: ID!, tournament: UpdateTournamentInput!): Tournament!
  deleteTournament(id: ID!): Boolean!
}

type Query {
  findTournaments(filter: TournamentFilter, teamOrder: TeamOrder): [Tournament]
}
